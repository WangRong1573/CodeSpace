<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--    声明核心对象DispatchServlet
            需要在Tomcat启动后，创建DispatchServlet对象的实例

            为什么在启动时创建DispatchServlet对象实例？
                因为在创建DispatchServlet对象过程中，会同时创建springMVC容器对象，读取springMVC配置文件
                把配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了

            servlet的初始化会执行init方法，DispatchServlet在init()中，
            //创建容器
            ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
            //把容器对象放入到servletContext中
            getServletContext().setAttribute(key,ac);
    -->

    <servlet>
        <servlet-name>myspringmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--    启动tomcat报错：springMVC创建容器对象时，默认读取配置文件位置为：/WEB-INF/myspringmvc-servlet.xml
        自定义springMVC读取配置文件位置：
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>

        <!--        在Tomcat启动时创建servlet对象
                    load-on-startup:表示Tomcat启动后创建对象的顺序，数值越小，时间越早，一般为大于0的正整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myspringmvc</servlet-name>
        <!--两种方式可以使用
            1.使用拓展名方式 *.xxxx例如：*.do,表示符合条件的请求都有这个servlet处理
            2.使用"/"
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>